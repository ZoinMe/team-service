// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: requestcomment.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RequestCommentService_CreateRequest_FullMethodName = "/consumer.RequestCommentService/CreateRequest"
	RequestCommentService_CreateComment_FullMethodName = "/consumer.RequestCommentService/CreateComment"
)

// RequestCommentServiceClient is the client API for RequestCommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the RequestCommentService service
type RequestCommentServiceClient interface {
	CreateRequest(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error)
	CreateComment(ctx context.Context, in *InsertComment, opts ...grpc.CallOption) (*InsertResponse, error)
}

type requestCommentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestCommentServiceClient(cc grpc.ClientConnInterface) RequestCommentServiceClient {
	return &requestCommentServiceClient{cc}
}

func (c *requestCommentServiceClient) CreateRequest(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertResponse)
	err := c.cc.Invoke(ctx, RequestCommentService_CreateRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestCommentServiceClient) CreateComment(ctx context.Context, in *InsertComment, opts ...grpc.CallOption) (*InsertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertResponse)
	err := c.cc.Invoke(ctx, RequestCommentService_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestCommentServiceServer is the server API for RequestCommentService service.
// All implementations must embed UnimplementedRequestCommentServiceServer
// for forward compatibility
//
// Define the RequestCommentService service
type RequestCommentServiceServer interface {
	CreateRequest(context.Context, *InsertRequest) (*InsertResponse, error)
	CreateComment(context.Context, *InsertComment) (*InsertResponse, error)
	mustEmbedUnimplementedRequestCommentServiceServer()
}

// UnimplementedRequestCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRequestCommentServiceServer struct {
}

func (UnimplementedRequestCommentServiceServer) CreateRequest(context.Context, *InsertRequest) (*InsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequest not implemented")
}
func (UnimplementedRequestCommentServiceServer) CreateComment(context.Context, *InsertComment) (*InsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedRequestCommentServiceServer) mustEmbedUnimplementedRequestCommentServiceServer() {}

// UnsafeRequestCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestCommentServiceServer will
// result in compilation errors.
type UnsafeRequestCommentServiceServer interface {
	mustEmbedUnimplementedRequestCommentServiceServer()
}

func RegisterRequestCommentServiceServer(s grpc.ServiceRegistrar, srv RequestCommentServiceServer) {
	s.RegisterService(&RequestCommentService_ServiceDesc, srv)
}

func _RequestCommentService_CreateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestCommentServiceServer).CreateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestCommentService_CreateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestCommentServiceServer).CreateRequest(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestCommentService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestCommentServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestCommentService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestCommentServiceServer).CreateComment(ctx, req.(*InsertComment))
	}
	return interceptor(ctx, in, info, handler)
}

// RequestCommentService_ServiceDesc is the grpc.ServiceDesc for RequestCommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequestCommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consumer.RequestCommentService",
	HandlerType: (*RequestCommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRequest",
			Handler:    _RequestCommentService_CreateRequest_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _RequestCommentService_CreateComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "requestcomment.proto",
}
